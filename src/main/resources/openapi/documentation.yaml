openapi: 3.0.3
info:
  title: Chat API
  version: "1.0.0"
servers:
  - url: http://localhost:8080/api
tags:
  - name: Auth
    description: Аутентификация
  - name: Chats
    description: Работа со списком чатов пользователя
  - name: Chat
    description: Операции внутри конкретного чата

paths:
  /auth/register:
    post:
      tags: [ Auth ]
      operationId: authRegister
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
            examples:
              sample:
                value:
                  email: user@example.com
                  password: "Str0ngP@ssw0rd"
                  displayName: "John Doe"
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags: [ Auth ]
      operationId: authLogin
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
            examples:
              sample:
                value:
                  email: user@example.com
                  password: "Str0ngP@ssw0rd"
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

  /auth/refresh-token:
    post:
      tags: [ Auth ]
      operationId: authRefresh
      summary: Обновление access-токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
            examples:
              sample:
                value:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Новый access-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

  /chats:
    get:
      tags: [ Chats ]
      operationId: listUserChats
      summary: Получить список чатов текущего пользователя
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список чатов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatWithLastMessage'
    post:
      tags: [ Chats ]
      operationId: createChat
      summary: Создать новый чат
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewChat'
            examples:
              sample:
                value:
                  title: "Ktor Fans"
      responses:
        '201':
          description: Чат создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'

  /chat/{chatId}:
    get:
      tags: [ Chat ]
      operationId: getChatMessages
      summary: Получить сообщения чата
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      responses:
        '200':
          description: Сообщения чата
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /chat/{chatId}/members:
    get:
      tags: [ Chat ]
      operationId: getChatMembers
      summary: Получить список участников чата
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      responses:
        '200':
          description: Список участников
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMember'
    post:
      tags: [ Chat ]
      operationId: addChatMember
      summary: Добавить участника в чат
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMember'
            examples:
              sample:
                value:
                  email: "friend@example.com"
      responses:
        '201':
          description: Участник добавлен

  /chat/{chatId}/leave:
    delete:
      tags: [ Chat ]
      operationId: leaveChat
      summary: Выйти из чата
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      responses:
        '204':
          description: Пользователь покинул чат

  /chat/{chatId}/messages:
    post:
      tags: [ Chat ]
      operationId: sendMessage
      summary: Отправить сообщение в чат
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
            examples:
              sample:
                value:
                  message: "Hello everyone!"
      responses:
        '201':
          description: Сообщение создано

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ChatIdParam:
      in: path
      name: chatId
      required: true
      schema:
        type: integer
        minimum: 1

  schemas:
    # ==== AUTH ====
    LoginUser:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RegisterUser:
      type: object
      required: [ email, password, displayName ]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        displayName:
          type: string
          minLength: 4
          maxLength: 30

    Token:
      type: object
      required: [ accessToken ]
      properties:
        accessToken:
          type: string

    User:
      type: object
      required: [ id, email, displayName ]
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        displayName:
          type: string
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true

    UserWithPassword:
      description: Внутренний DTO, в публичных ответах не используется
      type: object
      required: [ id, email, passwordHash, salt, displayName ]
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        passwordHash:
          type: string
        salt:
          type: string
        displayName:
          type: string
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true

    # ==== CHATS LIST ====
    ChatsMessage:
      type: object
      required: [ text, displayName, sendDate ]
      properties:
        text:
          type: string
        displayName:
          type: string
        sendDate:
          type: string
          format: date-time

    ChatWithLastMessage:
      type: object
      required: [ id, name, unreadCount ]
      properties:
        id:
          type: integer
        name:
          type: string
        lastMessage:
          allOf:
            - $ref: '#/components/schemas/ChatsMessage'
          nullable: true
        unreadCount:
          type: integer
          minimum: 0

    NewChat:
      type: object
      required: [ title ]
      properties:
        title:
          type: string

    Chat:
      type: object
      required: [ id, title ]
      properties:
        id:
          type: integer
        title:
          type: string
        type:
          type: string
          description: Тип чата (например, "group")
          example: group

    # ==== SINGLE CHAT ====
    ChatMember:
      type: object
      required: [ userId, displayName, role ]
      properties:
        userId:
          type: integer
        displayName:
          type: string
        role:
          type: string
          description: Роль участника (например, ADMIN или MEMBER)

    NewMember:
      type: object
      required: [ email ]
      properties:
        email:
          type: string
          format: email

    Message:
      type: object
      required: [ id, text, createdAt, type ]
      properties:
        id:
          type: integer
        displayName:
          type: string
          nullable: true
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        type:
          type: string
          description: Тип сообщения (значение по displayName enum MessageType)
          example: SYSTEM

    NewMessage:
      type: object
      required: [ message ]
      properties:
        message:
          type: string
